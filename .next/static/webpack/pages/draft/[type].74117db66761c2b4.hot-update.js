"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/draft/[type]",{

/***/ "./utils/Utils1.js":
/*!*************************!*\
  !*** ./utils/Utils1.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"exportContent\": function() { return /* binding */ exportContent; },\n/* harmony export */   \"exportDoc\": function() { return /* binding */ exportDoc; },\n/* harmony export */   \"removeHighlight\": function() { return /* binding */ removeHighlight; },\n/* harmony export */   \"replaceMulCharInString\": function() { return /* binding */ replaceMulCharInString; },\n/* harmony export */   \"returnCheckboxValue\": function() { return /* binding */ returnCheckboxValue; },\n/* harmony export */   \"returnCurrencyValue\": function() { return /* binding */ returnCurrencyValue; },\n/* harmony export */   \"returnInputValue\": function() { return /* binding */ returnInputValue; },\n/* harmony export */   \"scrollHandler\": function() { return /* binding */ scrollHandler; },\n/* harmony export */   \"timeDiffMin\": function() { return /* binding */ timeDiffMin; },\n/* harmony export */   \"timeDiffSec\": function() { return /* binding */ timeDiffSec; }\n/* harmony export */ });\n/* harmony import */ var hangul_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hangul-js */ \"./node_modules/hangul-js/hangul.js\");\n/* harmony import */ var hangul_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hangul_js__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction num2han(num) {\n    num = parseInt((num + \"\").replace(/[^0-9]/g, \"\"), 10) + \"\"; // 숫자/문자/돈 을 숫자만 있는 문자열로 변환\n    if (num == \"0\") return \"영\";\n    const number = [\n        \"영\",\n        \"일\",\n        \"이\",\n        \"삼\",\n        \"사\",\n        \"오\",\n        \"육\",\n        \"칠\",\n        \"팔\",\n        \"구\"\n    ];\n    const unit = [\n        \"\",\n        \"만\",\n        \"억\",\n        \"조\"\n    ];\n    const smallUnit = [\n        \"천\",\n        \"백\",\n        \"십\",\n        \"\"\n    ];\n    const result = []; //변환된 값을 저장할 배열\n    var unitCnt = Math.ceil(num.length / 4); //단위 갯수. 숫자 10000은 일단위와 만단위 2개이다.\n    num = num.padStart(unitCnt * 4, \"0\"); //4자리 값이 되도록 0을 채운다\n    const regexp = /[\\w\\W]{4}/g; //4자리 단위로 숫자 분리\n    const array = num.match(regexp);\n    //낮은 자릿수에서 높은 자릿수 순으로 값을 만든다(그래야 자릿수 계산이 편하다)\n    for(let i = array.length - 1, unitCnt = 0; i >= 0; i--, unitCnt++){\n        var hanValue = _makeHan(array[i]); //한글로 변환된 숫자\n        if (hanValue == \"\") continue;\n        result.unshift(hanValue + unit[unitCnt]); //unshift는 항상 배열의 앞에 넣는다.\n    }\n    //여기로 들어오는 값은 무조건 네자리이다. 1234 -> 일천이백삼십사\n    function _makeHan(text) {\n        let str = \"\";\n        for(let i = 0; i < text.length; i++){\n            let num = text[i];\n            if (num == \"0\") continue;\n            str += number[num] + smallUnit[i];\n        }\n        return str;\n    }\n    return \"금\".concat(result.join(\"\"), \"원정\");\n}\nfunction returnCurrencyValue(e) {\n    let val = e.target.value;\n    const isNumber = (v)=>/^\\d{1,100}$/.test(v); // or use [0-5]\n    if (isNumber(val.replace(/[, ]+/g, \"\"))) {\n        // val = val.replace(/[, ]+/g, '')\n        val = parseInt((val + \"\").replace(/[^0-9]/g, \"\"), 10) + \"\";\n        let textVal = num2han(val);\n        console.log(\"num2han\", num2han(val));\n        console.log(\"no comma val\", val);\n        return \"\".concat(val.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\"), \" (\").concat(textVal, \")\");\n    } else {\n        return e.target.value;\n    }\n}\nfunction returnCheckboxValue(e) {\n    let val = e.target.value;\n    const isNumber = (v)=>/^\\d{1,100}$/.test(v); // or use [0-5]\n    if (isNumber(val.replace(/[, ]+/g, \"\"))) {\n        // val = val.replace(/[, ]+/g, '')\n        val = parseInt((val + \"\").replace(/[^0-9]/g, \"\"), 10) + \"\";\n        let textVal = num2han(val);\n        console.log(\"num2han\", num2han(val));\n        console.log(\"no comma val\", val);\n        return \"\".concat(val.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\"), \" (\").concat(textVal, \")\");\n    }\n}\nfunction returnInputValue(e, item) {\n    if (e.target.type === \"text\") {\n        // if (userOS === 'Mac') {\n        //   console.log('mac')\n        //   return Hangul.assemble(val)\n        // } else {\n        //   console.log('window')\n        //   console.log('e.nativeEvent.isComposing', e.nativeEvent.isComposing)\n        //   if (e.nativeEvent.isComposing) {\n        //     return\n        //   } else {\n        //     return e.target.value\n        //   }\n        // }\n        return e.target.value;\n    // return Hangul.assemble(val)\n    } else if (e.target.toString().includes(\"SelectElement\")) {\n        let selectedIdx = e.target.selectedIndex;\n        let selectedValue = e.target.options[selectedIdx].value;\n        return selectedValue;\n    } else if (e.target.type === \"date\") {\n        const options = {\n            weekday: \"long\",\n            year: \"numeric\",\n            month: \"long\",\n            day: \"numeric\"\n        };\n        return e.target.value;\n    //   console.log('e.target.value', e.target.value.toLocaleDateString())\n    //   console.log('e.target.value', e.target.value.toLocaleDateString('en-US', options))\n    } else if (e.target.type === \"radio\") {\n        // let selectedIdx = e.target.selectedIndex\n        // let selectedValue = e.target.options[selectedIdx].value\n        return e.target.value;\n    } else if (e.target.type === \"checkboxList\") {\n        console.log(\"entered checkbox\");\n        let checked = Array.from(document.querySelectorAll(\"[name=\".concat(e.target.name, \"]:checked\")));\n        // let index = Array.from(document.querySelectorAll(`[id=${e.target.id}]:checked`).index())\n        let selectedValue = [];\n        // let selectedIndex = []\n        checked.forEach(function(e) {\n            selectedValue.push(\"- \".concat(e.value));\n        // selectedValue.push(e.index())\n        });\n        return selectedValue.join(\"<br>\");\n    } else if (e.target.type === \"checkbox\") {\n        console.log(\"entered checkboxString\");\n        let checked = Array.from(document.querySelectorAll(\"[name=\".concat(e.target.name, \"]:checked\")));\n        let selectedValue = [];\n        checked.forEach(function(e) {\n            selectedValue.push(\"\".concat(e.value));\n        });\n        return selectedValue.join(\", \");\n    }\n}\nfunction replaceMulCharInString(_string, input, _tracerKey) {\n    //   console.log('진입1 진입1 진입1 진입1 진입1 진입1 진입1 진입1 진입1 진입1 진입1 ', _tracerKey)\n    //   console.log('replaceMulCharInString input', input)\n    for(let i = 0; i < input.keys.length; i++){\n        // console.log('replaceMulCharInString 진입')\n        if (input.values[i] !== \"\" && input.keys[i] === _tracerKey) {\n            //   console.log('[1] replaceMulCharInString ADD HIGHLIGHT 진입1', input)\n            //   console.log('replaceMulCharInString input.values', input.values[i], 'input.keys', input.keys[i], '_tracerKey', _tracerKey)\n            // console.log(\"case 1: \" + input.keys[i]);\n            // _string = _string.replace(new RegExp(`{${input.keys[i]}}`, 'gi'), `<span id=\"span_${_tracerKey}\" style=\"color:#ffffff;font-weight:bold;text-decoration:underline;background-color:#8C53A0\">${input.values[i]}</span>`)\n            // 이전것\n            //   _string = _string.replace(new RegExp(`{${input.placeholder[i]}}`, 'gi'), `<span class=\"variable\" style=\"color:#ffffff;font-weight:bold;text-decoration:underline;background-color:#8C53A0\">${input.values[i]}</span>`) // regex {} 버전\n            //   _string = _string.replace(new RegExp(`[${input.placeholder[i]}]`, 'gi'), `<span class=\"variable\" style=\"color:#ffffff;font-weight:bold;text-decoration:underline;background-color:#8C53A0\">${input.values[i]}</span>`) // regex [] 버전\n            //   _string = _string.replace(`[${input.placeholder[i]}]`, `<span class=\"variable\" style=\"color:#ffffff;font-weight:bold;text-decoration:underline;background-color:#8C53A0\">${input.values[i]}</span>`) // !!! 되던것\n            _string = _string.replace('<span id=\"span_'.concat(input.keys[i], '\" class=\"draft\">[').concat(input.placeholder[i], \"]</span>\"), '<span id=\"span_'.concat(input.keys[i], '\" class=\"variable\">').concat(input.values[i], \"</span>\")); // !!! 되던것 수정해봄\n        //   _string = _string.replace(`<span id=\\`span_${input.keys[i]}\\` class=\"draft\">[${input.placeholder[i]}]</span>`, `<span class=\"variable\" >${input.values[i]}</span>`) // !!! 되던것 수정해봄\n        // _string = _string.replace(new RegExp(`{${input.keys[i]}}`, 'gi'), `${input.values[i]}`)\n        // _string = _string.replace(new RegExp(`<span id=\"span_${_tracerKey}\" class=\"draft\">`, 'gi'), `<span id=\"span_${_tracerKey}\" class=\"variable\">`)\n        //   console.log('_string', _string)\n        } else if (input.values[i] !== \"\" && input.keys[i] !== _tracerKey) {\n            //   console.log('[2] replaceMulCharInString ADD HIGHLIGHT 진입2', input)\n            // console.log('input.values', input.values[i], 'input.keys', input.keys[i], '_tracerKey', _tracerKey)\n            // console.log(\"case 2: \" + input.keys[i]);\n            //// _string = _string.replace(new RegExp(`{${input.keys[i]}}`, 'gi'), `<span id=\"span_${_tracerKey}\" style=\"color:#000000;font-weight:bold;background-color:#D4BCDC\">${input.values[i]}</span>`)\n            // 이전것\n            //   _string = _string.replace(new RegExp(`{${input.placeholder[i]}}`, 'gi'), `<span class=\"drafted\" style=\"color:#000000;background-color:#D4BCDC\">${input.values[i]}</span>`) // regex {} 버전\n            //   _string = _string.replace(new RegExp(`[${input.placeholder[i]}]`, 'gi'), `<span class=\"drafted\" style=\"color:#000000;background-color:#D4BCDC\">${input.values[i]}</span>`) // regex [] 버전\n            //   _string = _string.replace(`[${input.placeholder[i]}]`, `<span class=\"drafted\" style=\"color:#000000;background-color:#D4BCDC\">${input.values[i]}</span>`) // !!! 되던것\n            _string = _string.replace('<span id=\"span_'.concat(input.keys[i], '\" class=\"draft\">[').concat(input.placeholder[i], \"]</span>\"), '<span id=\"span_'.concat(input.keys[i], '\" class=\"drafted\">').concat(input.values[i], \"</span>\")); // !!! 되던것 수정해봄\n        // _string = _string.replace(new RegExp(`{${input.keys[i]}}`, 'gi'), `${input.values[i]}`)\n        // _string = _string.replace(new RegExp(`<span id=\"span_${_tracerKey}\" class=\"draft\">`, 'gi'), `<span id=\"span_${_tracerKey}\" class=\"drafted\">`)\n        //   console.log('_string', _string)\n        }\n    // else {\n    //   //   console.log('replaceMulCharInString ADD HIGHLIGHT 진입3', input)\n    //   _string = _string.replace(`<span id=\"span_${input.keys[i]}\" class=\"variable\">[${input.placeholder[i]}]</span>`, `<span id=\"span_${input.keys[i]}\" class=\"drafted\">${input.values[i]}</span>`) // !!! 되던것 수정해봄\n    //   //   _string = _string.replace(new RegExp(`{${input.placeholder[i]}}`, 'gi'), `${input.values[i]}`)\n    //   //   _string = _string.replace(new RegExp(`<span id=\"span_${_tracerKey}\" class=\"draft\">`, 'gi'), `<span id=\"span_${_tracerKey}\" class=\"drafted\">`)\n    // }\n    }\n    return _string;\n}\nfunction removeHighlight(_string, input, _tracerKey) {\n    // console.log('진입2 진입2 진입2 진입2 진입2 진입2 진입2 진입2 진입2 진입2 ', _tracerKey)\n    for(let i = 0; i < input.keys.length; i++){\n        // console.log('removeHighlight 진입')\n        // console.log('input', input)\n        //  && input.keys[i] === _tracerKey\n        if (input.values[i] !== \"\") {\n            //   console.log('[3] removeHighlight REMOVE HIGHLIGHT 진입4', input.keys[i], input.values[i])\n            //   console.log('removeHighlight input.values', input.values[i], 'input.keys', input.keys[i], '_tracerKey', _tracerKey)\n            // 이전것\n            //   _string = _string.replace(new RegExp(`{${input.placeholder[i]}}`, 'gi'), `<span id=\"span_${_tracerKey}\" style=\"color:#000000;background-color:#D4BCDC\">${input.values[i]}</span>`)\n            //   _string = _string.replace(\n            //     new RegExp(`<span class=\"variable\" style=\"color:#ffffff;font-weight:bold;text-decoration:underline;background-color:#8C53A0\">${input.values[i]}</span>`, 'gi'),\n            //     `<span class=\"drafted\">${input.values[i]}</span>`\n            //   ) // !!! 되던것\n            _string = _string.replace('<span id=\"span_'.concat(input.keys[i], '\" class=\"variable\">').concat(input.values[i], \"</span>\"), '<span id=\"span_'.concat(input.keys[i], '\" class=\"drafted\">').concat(input.values[i], \"</span>\")); // !!! 되던것 수정해봄\n        //   console.log('변경후 _string', _string)\n        //   _string = _string.replace(`<span id=\"span_${input.keys[i]}\" class=\"draft\">[${input.placeholder[i]}]</span>`, `<span id=\"span_${input.keys[i]}\" class=\"drafted\">${input.values[i]}</span>`) // !!! 되던것 수정해봄\n        //   _string = _string.replace(`[ ${input.placeholder[i]} ]`, `<span id=\"span_${_tracerKey}\" style=\"color:#000000;background-color:#D4BCDC\">${input.values[i]}</span>`)\n        // _string = _string.replace(new RegExp(`{${input.keys[i]}}`, 'gi'), `<span class=\"variable\" style=\"color:#000000;font-weight:bold;background-color:#D4BCDC\">${input.values[i]}</span>`)\n        // console.log('_string', _string)\n        // _string = _string.replace(new RegExp(`{${input.keys[i]}}`, 'gi'), `${input.values[i]}`)\n        // _string = _string.replace(new RegExp(`<span id=\"span_${_tracerKey}\" class=\"draft\">`, 'gi'), `<span id=\"span_${_tracerKey}\" class=\"drafted\">`)\n        }\n    // else {\n    //   //   console.log('removeHighlight REMOVE HIGHLIGHT 진입5', input)\n    //   _string = _string.replace(new RegExp(`<span id=\"span_${input.keys[i]}\" class=\"variable\">${input.values[i]}</span>`, 'gi'), `<span id=\"span_${input.keys[i]}\" class=\"drafted\">${input.values[i]}</span>`) // !!! 되던것 수정해봄\n    //   //   _string = _string.replace(new RegExp(`<span id=\"span_${_tracerKey}\" class=\"draft\">`, 'gi'), `<span id=\"span_${_tracerKey}\" class=\"drafted\">`)\n    // }\n    }\n    // console.log('_string', _string)\n    return _string;\n}\nfunction scrollHandler(span_id) {\n    // console.log('entered scrollHandler', `span_${span_id}`)\n    const container = document.getElementById(\"right\");\n    const element = document.getElementById(\"span_\".concat(span_id));\n    //   container.scrollTop = 0\n    if (element) {\n        console.log(\"element.offsetTop\", element.offsetTop);\n        console.log(\"element.offsetTop - 300\", element.offsetTop - 300);\n        container.scrollTop = element.offsetTop - 300;\n    // container.scrollTop = element.offsetTop\n    }\n}\nfunction timeDiffSec(start, end) {\n    let timeStart = new Date(start);\n    let timeEnd = new Date(end);\n    // let timeStart = new Date('2012-10-09 12:00')\n    // let timeEnd = new Date('2013-10-09 12:00')\n    console.log(\"timeStart\", timeStart);\n    console.log(\"timeEnd\", timeEnd);\n    let difference = timeEnd.getTime() - timeStart.getTime(); // This will give difference in milliseconds\n    let resultInSeconds = Math.round(difference / 1000);\n    return resultInSeconds;\n}\nfunction timeDiffMin(start, end) {\n    let timeStart = new Date(start);\n    let timeEnd = new Date(end);\n    // let timeStart = new Date('2012-10-09 12:00')\n    // let timeEnd = new Date('2013-10-09 12:00')\n    console.log(\"timeStart\", timeStart);\n    console.log(\"timeEnd\", timeEnd);\n    let difference = timeEnd.getTime() - timeStart.getTime(); // This will give difference in milliseconds\n    let resultInMinutes = parseFloat((difference / 1000 / 60).toFixed(2));\n    console.log(\"resultInMinutes\", resultInMinutes);\n    return resultInMinutes;\n}\nfunction exportContent(clause_array, input_array, fileName) {\n    // console.log(\"Export Document\");\n    // console.log(\"clause_array\", clause_array);\n    // let cNum = 0\n    // let newState = [...clause_array].map(obj => {\n    //   if (obj.is_default === true && obj.is_clause === true) {\n    //     cNum = cNum + 1\n    //     return (`${cNum}. ` + obj.clause_title_en).concat(obj.content_en)\n    //   } else if (obj.is_default === true && obj.is_clause !== true) {\n    //     return obj.content_en\n    //   }\n    //   return obj\n    // })\n    // console.log('newState', newState)\n    const mapped_clause = clause_array.map(function(x) {\n        if (x.is_default == true) return x.content_en;\n    });\n    let cNo = 0;\n    const mapped_title = clause_array.map(function(x) {\n        if (x.is_default === true) {\n            if (x.is_clause === true) {\n                cNo = cNo + 1;\n                return \"\".concat(cNo, \". \") + x.clause_title_en;\n            }\n            return x.clause_title_en;\n        }\n    });\n    console.log(\"mapped_clause\", mapped_clause);\n    console.log(\"mapped_title\", mapped_title);\n    let dataToExport = [];\n    for(let i = 0; i < mapped_clause.length; i++){\n        if (mapped_title[i] !== undefined) {\n            mapped_title[i] = \"<b>\" + mapped_title[i] + \"</b>\";\n            dataToExport[dataToExport.length] = mapped_title[i].concat(mapped_clause[i]);\n        } else {\n            dataToExport[dataToExport.length] = mapped_clause[i];\n        }\n    }\n    dataToExport = dataToExport.filter(function(element) {\n        return element !== undefined;\n    });\n    let title = '<h1 style=\"font-weight:bold;text-align:center\">'.concat(fileName, \" 계약서</h1>\");\n    dataToExport = [\n        title\n    ].concat(dataToExport);\n    console.log(\"dataToExport\", dataToExport);\n    //\n    let newContent = dataToExport.join(\" <br /> \");\n    for(let i = 0; i < input_array.length; i++){\n        if (input_array[i].value !== \"\") {\n            newContent = newContent.replace(new RegExp(\"{\".concat(input_array[i].placeholder, \"}\"), \"gi\"), \"{\".concat(input_array[i].value, \"}\"));\n        } else {\n            newContent = newContent.replace(new RegExp(\"{\".concat(input_array[i].placeholder, \"}\"), \"gi\"), '<span style=\"color:#000000;font-weight:bold\">['.concat(input_array[i].placeholder, \"]</span>\"));\n        }\n    }\n    newContent = newContent.replace(new RegExp(\"<b>\", \"gi\"), \"<h2>\");\n    newContent = newContent.replace(new RegExp(\"</b>\", \"gi\"), \"</h2>\");\n    // newContent = newContent.replace(new RegExp(`<span style=\"color:#ffffff;font-weight:bold;text-decoration:underline;background-color:#8C53A0\">`, 'gi'), `<span style=\"color:#000000;font-weight:bold;background-color:#CFF4C6\">`)\n    // newContent = newContent.replace(new RegExp(`<span style=\"color:#000000;background-color:#D4BCDC\">`, 'gi'), `<span style=\"color:#000000;font-weight:bold;background-color:#CFF4C6\">`)\n    //   newContent = newContent.replace(\n    //     new RegExp(`<span class=\"variable\" style=\"color:#ffffff;font-weight:bold;text-decoration:underline;background-color:#8C53A0\">`, 'gi'),\n    //     `<span style=\"color:#000000;font-weight:bold;background-color:#CFF4C6\">`\n    //   )\n    //   newContent = newContent.replace(new RegExp(`<span class=\"drafted\" style=\"color:#000000;background-color:#D4BCDC\">`, 'gi'), `<span style=\"color:#000000;font-weight:bold;background-color:#CFF4C6\">`)\n    //   newContent = newContent.replace(new RegExp(`style=\"color:#000000;background-color:#D4BCDC\"`, 'gi'), `style=\"color:#000000;font-weight:bold;background-color:#CFF4C6\"`)\n    // newContent = newContent.replace(new RegExp(`<p>`, 'gi'), `<p style=\"font-family: Arial\">`);\n    //   $w('#html7').postMessage({ content: newContent })\n    exportDoc(newContent, fileName);\n}\nfunction exportDoc(element, filename) {\n    var header = \"<html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:w='urn:schemas-microsoft-com:office:word' xmlns='http://www.w3.org/TR/REC-html40'><head><meta charset='utf-8'>\";\n    var style = \"<style type='text/css'>p, h2, h3 {font-family:Malgun Gothic; text-align:justify; font-size:10pt; margin-bottom: 0px; margin-top: 0px;line-height:115%;} h1 {font-family:Malgun Gothic; font-size:12pt; margin-bottom: 0px; margin-top: 0px;line-height:115%;}</style></head><body>\";\n    var footer = \"</body></html>\";\n    // var html = header+element+footer;\n    var html = header + style + element + footer;\n    // console.log(html);\n    var blob = new Blob([\n        \"\\uFEFF\",\n        html\n    ], {\n        type: \"application/msword\"\n    });\n    // Specify link url\n    var url = \"data:application/vnd.ms-word;charset=utf-8,\" + encodeURIComponent(html);\n    filename = filename + \"계약서\";\n    // Specify file name\n    filename = filename ? filename + \".doc\" : \"document.doc\";\n    // Create download link element\n    var downloadLink = document.createElement(\"a\");\n    document.body.appendChild(downloadLink);\n    if (navigator.msSaveOrOpenBlob) {\n        navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n        // Create a link to the file\n        downloadLink.href = url;\n        // Setting the file name\n        downloadLink.download = filename;\n        //triggering the function\n        downloadLink.click();\n    }\n    document.body.removeChild(downloadLink);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/Utils1.js\n"));

/***/ })

});